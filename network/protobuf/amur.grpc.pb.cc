// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: amur.proto

#include "amur.pb.h"
#include "amur.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace AMUR {

static const char* Maintenance_method_names[] = {
  "/AMUR.Maintenance/DataExchange",
  "/AMUR.Maintenance/DataStreamExchange",
};

std::unique_ptr< Maintenance::Stub> Maintenance::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Maintenance::Stub> stub(new Maintenance::Stub(channel));
  return stub;
}

Maintenance::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DataExchange_(Maintenance_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataStreamExchange_(Maintenance_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Maintenance::Stub::DataExchange(::grpc::ClientContext* context, const ::AMUR::AmurSensors& request, ::AMUR::AmurControls* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DataExchange_, context, request, response);
}

void Maintenance::Stub::experimental_async::DataExchange(::grpc::ClientContext* context, const ::AMUR::AmurSensors* request, ::AMUR::AmurControls* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DataExchange_, context, request, response, std::move(f));
}

void Maintenance::Stub::experimental_async::DataExchange(::grpc::ClientContext* context, const ::AMUR::AmurSensors* request, ::AMUR::AmurControls* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DataExchange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AMUR::AmurControls>* Maintenance::Stub::PrepareAsyncDataExchangeRaw(::grpc::ClientContext* context, const ::AMUR::AmurSensors& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AMUR::AmurControls>::Create(channel_.get(), cq, rpcmethod_DataExchange_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::AMUR::AmurControls>* Maintenance::Stub::AsyncDataExchangeRaw(::grpc::ClientContext* context, const ::AMUR::AmurSensors& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataExchangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::AMUR::AmurSensors, ::AMUR::AmurControls>* Maintenance::Stub::DataStreamExchangeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::AMUR::AmurSensors, ::AMUR::AmurControls>::Create(channel_.get(), rpcmethod_DataStreamExchange_, context);
}

void Maintenance::Stub::experimental_async::DataStreamExchange(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::AMUR::AmurSensors,::AMUR::AmurControls>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::AMUR::AmurSensors,::AMUR::AmurControls>::Create(stub_->channel_.get(), stub_->rpcmethod_DataStreamExchange_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::AMUR::AmurSensors, ::AMUR::AmurControls>* Maintenance::Stub::AsyncDataStreamExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::AMUR::AmurSensors, ::AMUR::AmurControls>::Create(channel_.get(), cq, rpcmethod_DataStreamExchange_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::AMUR::AmurSensors, ::AMUR::AmurControls>* Maintenance::Stub::PrepareAsyncDataStreamExchangeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::AMUR::AmurSensors, ::AMUR::AmurControls>::Create(channel_.get(), cq, rpcmethod_DataStreamExchange_, context, false, nullptr);
}

Maintenance::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Maintenance_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Maintenance::Service, ::AMUR::AmurSensors, ::AMUR::AmurControls>(
          [](Maintenance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AMUR::AmurSensors* req,
             ::AMUR::AmurControls* resp) {
               return service->DataExchange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Maintenance_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Maintenance::Service, ::AMUR::AmurSensors, ::AMUR::AmurControls>(
          [](Maintenance::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::AMUR::AmurControls,
             ::AMUR::AmurSensors>* stream) {
               return service->DataStreamExchange(ctx, stream);
             }, this)));
}

Maintenance::Service::~Service() {
}

::grpc::Status Maintenance::Service::DataExchange(::grpc::ServerContext* context, const ::AMUR::AmurSensors* request, ::AMUR::AmurControls* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Maintenance::Service::DataStreamExchange(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AMUR::AmurControls, ::AMUR::AmurSensors>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace AMUR

