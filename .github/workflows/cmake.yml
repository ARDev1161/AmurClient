# All actions have a name that will be displayed in the "Actions" page in GitHub.
name: AmurClientCI


# The "on" option will specify when to run this action and on which branch
# Usually for a CI action you would like to run it on every pull request and on push
# For CD you would probably only want to run it on closed pull requests or direct pushes on master
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
# If you want to run it manually you would add "worflow_dispatch"
  workflow_dispatch:

# The whole action can contain sub-items called jobs
# Jobs are run separately and will spin up a new build machine for each sub-item
jobs:
  # Under jobs you can put whatever name you want

  # This is just a custom name "build" but it can be anything
  build:
    # What build machine to start

    # For Windows you can go with "windows-latest"
    runs-on: ubuntu-latest

    # Steps are the individual actions for each job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Usually this is always needed
      - uses: actions/checkout@v2
      
    - name: ConfigureCMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
