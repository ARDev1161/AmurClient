.TH "PWMController" 3 "Mon Mar 20 2023" "Version 0.42" "AmurClient" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PWMController \- Класс управления PWM сигналами  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <pwmcontroller\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPWMController\fP ()"
.br
.ti -1c
.RI "int \fBhardPWMCreate\fP (unsigned int pin)"
.br
.ti -1c
.RI "int \fBhardPWMChange\fP (unsigned int pin, unsigned int dutyCycle)"
.br
.ti -1c
.RI "int \fBhardPWMStop\fP (unsigned int pin)"
.br
.ti -1c
.RI "int \fBsoftPWMCreate\fP (unsigned int pin)"
.br
.ti -1c
.RI "int \fBsoftPWMChange\fP (unsigned int pin, unsigned int dutyCycle)"
.br
.ti -1c
.RI "int \fBsoftPWMStop\fP (unsigned int pin)"
.br
.ti -1c
.RI "int \fBgetPwmRange\fP () const"
.br
.ti -1c
.RI "void \fBsetPwmRange\fP (unsigned int newPwmRange)"
.br
.ti -1c
.RI "int \fBgetFreqHardware\fP () const"
.br
.ti -1c
.RI "void \fBsetFreqHardware\fP (unsigned int newFreqHardware)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "unsigned int \fBtranslateDuty\fP (unsigned int duty, unsigned int gpioRange)"
.br
.ti -1c
.RI "unsigned int \fBtranslateDuty\fP (unsigned int duty)"
.br
.ti -1c
.RI "int \fBtranslateDuty\fP (int duty, int newMax)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned int \fBpwmRange\fP = 255"
.br
.ti -1c
.RI "unsigned int \fBfreqHardware\fP = 375"
.br
.in -1c
.SH "Detailed Description"
.PP 
Класс управления PWM сигналами 

Данный класс позволяет управлять PWM сигналами робота\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "PWMController::PWMController ()"
Создаёт экземпляр класса для работы с PWM\&. 
.SH "Member Function Documentation"
.PP 
.SS "int PWMController::getFreqHardware () const"

.SS "int PWMController::getPwmRange () const"

.SS "int PWMController::hardPWMChange (unsigned int pin, unsigned int dutyCycle)"
Изменяет скважность на выводе аппаратного PWM\&. 
.PP
\fBParameters\fP
.RS 4
\fIpin\fP Вывод на котором изменяется скважность аппаратного PWM сигнала 
.br
\fIdutyCycle\fP Скважность аппаратного PWM сигнала 
.RE
.PP

.SS "int PWMController::hardPWMCreate (unsigned int pin)"
Создаёт аппаратный PWM сигнал на выводе Raspberry Pi в нотации GPIO\&. 
.PP
\fBParameters\fP
.RS 4
\fIpin\fP Вывод на котором создаётся аппаратный PWM сигнал 
.RE
.PP

.SS "int PWMController::hardPWMStop (unsigned int pin)"
Останавливает аппаратный PWM сигнал на выводе Raspberry Pi в нотации GPIO\&. 
.PP
\fBParameters\fP
.RS 4
\fIpin\fP Вывод на котором останавливается аппаратный PWM сигнал 
.RE
.PP

.SS "void PWMController::setFreqHardware (unsigned int newFreqHardware)"

.SS "void PWMController::setPwmRange (unsigned int newPwmRange)"

.SS "int PWMController::softPWMChange (unsigned int pin, unsigned int dutyCycle)"
Изменяет скважность на выводе программного PWM\&. 
.PP
\fBParameters\fP
.RS 4
\fIpin\fP Вывод на котором изменяется скважность программного PWM сигнала 
.br
\fIdutyCycle\fP Скважность программного PWM сигнала 
.RE
.PP

.SS "int PWMController::softPWMCreate (unsigned int pin)"
Создаёт программный PWM сигнал на выводе Raspberry Pi в нотации GPIO\&. 
.PP
\fBParameters\fP
.RS 4
\fIpin\fP Вывод на котором создаётся программный PWM сигнал 
.RE
.PP
\fBReturns\fP
.RS 4
Возвращает 0 если при создании PWM сигнала не произошло ошибки 
.RE
.PP

.SS "int PWMController::softPWMStop (unsigned int pin)"
Останавливает программный PWM сигнал на выводе Raspberry Pi в нотации GPIO\&. 
.PP
\fBParameters\fP
.RS 4
\fIpin\fP Вывод на котором останавливается программный PWM сигнал 
.RE
.PP

.SS "int PWMController::translateDuty (int duty, int newMax)\fC [inline]\fP, \fC [private]\fP"

.SS "unsigned int PWMController::translateDuty (unsigned int duty)\fC [inline]\fP, \fC [private]\fP"

.SS "unsigned int PWMController::translateDuty (unsigned int duty, unsigned int gpioRange)\fC [inline]\fP, \fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "unsigned int PWMController::freqHardware = 375\fC [private]\fP"

.SS "unsigned int PWMController::pwmRange = 255\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for AmurClient from the source code\&.
